services:
  # configSrv
  configSrv:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # shard1
  shard1:    
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1
    volumes:
      - shard1-data:/data/db
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.20
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1", 
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # shard1-rep1
  shard1-rep1:    
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1-rep1
    volumes:
      - shard1-rep1-data:/data/db
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1", 
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s 

  # shard1-rep2
  shard1-rep2:    
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1-rep2
    volumes:
      - shard1-rep2-data:/data/db
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1", 
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s 
      
  # shard2
  shard2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2
    volumes:
      - shard2-data:/data/db
    restart: always
    ports:
      - "27030:27030"
    networks:
      app-network:
        ipv4_address: 173.17.0.30
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27030"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s  
 
  # shard2-rep1
  shard2-rep1:    
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2-rep1
    volumes:
      - shard2-rep1-data:/data/db
    restart: always
    ports:
      - "27031:27031"
    networks:
      app-network:
        ipv4_address: 173.17.0.31
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2", 
        "--bind_ip_all",
        "--port",
        "27031"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s 

  # shard2-rep2
  shard2-rep2:    
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2-rep2
    volumes:
      - shard2-rep2-data:/data/db
    restart: always
    ports:
      - "27032:27032"
    networks:
      app-network:
        ipv4_address: 173.17.0.32
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2", 
        "--bind_ip_all",
        "--port",
        "27032"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s 

  # router1 для простоты один
  mongos_router1:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongos_router1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.18
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s  

  # redis      
  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.2

  redis_2:
    image: "redis:latest"
    container_name: redis_2
    ports:
      - "6379"
    volumes:
      - redis_2_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.3

  redis_3:
    image: "redis:latest"
    container_name: redis_3
    ports:
      - "6379"
    volumes:
      - redis_3_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.4

  redis_4:
    image: "redis:latest"
    container_name: redis_4
    ports:
      - "6379"
    volumes:
      - redis_4_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.5

  redis_5:
    image: "redis:latest"
    container_name: redis_5
    ports:
      - "6379"
    volumes:
      - redis_5_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.6

  redis_6:
    image: "redis:latest"
    container_name: redis_6
    ports:
      - "6379"
    volumes:
      - redis_6_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.7    
   
  redis_cluster:
    image: redis:latest
    container_name: redis_cluster
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    tty: true
    command: "redis-cli --cluster create   173.17.0.2:6379   173.17.0.3:6379   173.17.0.4:6379   173.17.0.5:6379   173.17.0.6:6379   173.17.0.7:6379   --cluster-replicas 1 --cluster-yes"
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6

  # pymongo_api
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router1
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router1"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_cluster:6379"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16
  
volumes:
  config-data:
  shard1-data:
  shard2-data:
  shard1-rep1-data:
  shard1-rep2-data:
  shard2-rep1-data:
  shard2-rep2-data:  
  redis_1_data: {}
  redis_2_data: {}
  redis_3_data: {}
  redis_4_data: {}
  redis_5_data: {}
  redis_6_data: {}